@page "/restaurantproductcategories/delete"
@using Microsoft.EntityFrameworkCore
@using AnyReservationTemp.Domain
@inject IDbContextFactory<AnyReservationTemp.Data.AnyReservationTempContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<p>Are you sure you want to delete this?</p>
<div>
    <h2>RestaurantProductCategory</h2>
    <hr />
    @if (restaurantproductcategory is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">ProductCategoryId</dt>
            <dd class="col-sm-10">@restaurantproductcategory.ProductCategoryId</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">RestaurantId</dt>
            <dd class="col-sm-10">@restaurantproductcategory.RestaurantId</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Name</dt>
            <dd class="col-sm-10">@restaurantproductcategory.Name</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Contact</dt>
            <dd class="col-sm-10">@restaurantproductcategory.Contact</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">EmailAddress</dt>
            <dd class="col-sm-10">@restaurantproductcategory.EmailAddress</dd>
        </dl>
        <EditForm method="post" Model="restaurantproductcategory" OnValidSubmit="DeleteRestaurantProductCategory" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(restaurantproductcategory is null)">Delete</button> |
            <a href="/restaurantproductcategories">Back to List</a>
        </EditForm>
    }
</div>

@code {
    private RestaurantProductCategory? restaurantproductcategory;

    [SupplyParameterFromQuery]
    private int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        restaurantproductcategory = await context.RestaurantProductCategory.FirstOrDefaultAsync(m => m.Id == Id);

        if (restaurantproductcategory is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task DeleteRestaurantProductCategory()
    {
        using var context = DbFactory.CreateDbContext();
        context.RestaurantProductCategory.Remove(restaurantproductcategory!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/restaurantproductcategories");
    }
}
