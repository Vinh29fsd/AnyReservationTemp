@page "/restaurants/edit"
@using Microsoft.EntityFrameworkCore
@using AnyReservationTemp.Domain
@inject IDbContextFactory<AnyReservationTemp.Data.AnyReservationTempContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<head>
    <link href="/bootstrap/RestaurantSelectionLayout.css" rel="stylesheet" />
</head>

<h2>Restaurant</h2>
<hr />
@if (Restaurant is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="Restaurant" OnValidSubmit="UpdateRestaurant" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary role="alert"/>
                <input type="hidden" name="Restaurant.Id" value="@Restaurant.Id" />
                <div class="mb-3">
                    <label for="location" class="form-label">Location:</label>
                    <InputText id="location" @bind-Value="Restaurant.Location" class="form-control" />
                    <ValidationMessage For="() => Restaurant.Location" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="name" class="form-label">Name:</label>
                    <InputText id="name" @bind-Value="Restaurant.Name" class="form-control" />
                    <ValidationMessage For="() => Restaurant.Name" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="contact" class="form-label">Contact:</label>
                    <InputText id="contact" @bind-Value="Restaurant.Contact" class="form-control" />
                    <ValidationMessage For="() => Restaurant.Contact" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="emailaddress" class="form-label">EmailAddress:</label>
                    <InputText id="emailaddress" @bind-Value="Restaurant.EmailAddress" class="form-control" />
                    <ValidationMessage For="() => Restaurant.EmailAddress" class="text-danger" />
                </div>
                <h5>Drag and Drop Restaurant Display Image to change</h5>

                <!-- Code for image drag and drop-->
                <div id="drop-area" class="drop-area">
                    <p>Drag and Drop your image here</p>
                    <input type="file" id="file-input" accept="image/*" style="display: none;" />
                    <img id="preview" src="" alt="Image Preview" style="display:none;" />
                </div>

                <div id="image-container" style="margin-top: 20px;">
                    <!-- The uploaded image will be displayed here -->
                </div>

                <script>
                    // Get the necessary DOM elements
                    const dropArea = document.getElementById("drop-area");
                    const fileInput = document.getElementById("file-input");
                    const preview = document.getElementById("preview");

                    // Check if there's an image in localStorage on page load
                    window.onload = function () {
                        const storedImage = localStorage.getItem("image");
                        if (storedImage) {
                            preview.src = storedImage;
                            preview.style.display = "block"; // Show the image
                        } 
                    };

                    // Drag and Drop Events
                    dropArea.addEventListener("dragover", (event) => {
                        event.preventDefault();
                        dropArea.style.borderColor = "#CC0000"; // Change border color on hover
                    });

                    dropArea.addEventListener("dragleave", () => {
                        dropArea.style.borderColor = "#FFFF99"; // Reset border color
                    });

                    dropArea.addEventListener("drop", (event) => {
                        event.preventDefault();
                        const file = event.dataTransfer.files[0];
                        if (file && file.type.startsWith("image/")) {
                            // Set the image preview
                            const reader = new FileReader();
                            reader.onload = function (e) {
                                preview.src = e.target.result;
                                preview.style.display = "block"; // Show the preview
                                // Send the image to the server
                                uploadImage(file);
                            };
                            reader.readAsDataURL(file);
                        } else {
                            alert("Please drop a valid image file.");
                        }
                    });

                    // Trigger the file input when clicking the drop area
                    dropArea.addEventListener("click", () => {
                        fileInput.click();
                    });

                    // Listen for file input change (if image selected manually)
                    fileInput.addEventListener("change", () => {
                        const file = fileInput.files[0];
                        if (file && file.type.startsWith("image/")) {
                            const reader = new FileReader();
                            reader.onload = function (e) {
                                preview.src = e.target.result;
                                preview.style.display = "block"; // Show the preview
                                // Send the image to the server
                                uploadImage(file);
                            };
                            reader.readAsDataURL(file);
                        } else {
                            alert("Please select a valid image file.");
                        }
                    });
                    function uploadImage(file) {
                        const formData = new FormData();
                        formData.append("file", file);

                        fetch('/restaurants/upload-image', {
                            method: 'POST',
                            body: formData,
                        })
                            .then(response => response.json())
                            .then(data => {
                                // Handle success (e.g., update the restaurant's image URL in the UI)
                                console.log(data);
                            })
                            .catch(error => {
                                console.error('Error uploading image:', error);
                            });
                    }
                </script>
                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/restaurants">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    private int Id { get; set; }

    [SupplyParameterFromForm]
    private Restaurant? Restaurant { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        Restaurant ??= await context.Restaurant.FirstOrDefaultAsync(m => m.Id == Id);

        if (Restaurant is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more information, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task UpdateRestaurant()
    {
        using var context = DbFactory.CreateDbContext();
        context.Attach(Restaurant!).State = EntityState.Modified;

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!RestaurantExists(Restaurant!.Id))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/restaurants");
    }

    private bool RestaurantExists(int id)
    {
        using var context = DbFactory.CreateDbContext();
        return context.Restaurant.Any(e => e.Id == id);
    }
}
