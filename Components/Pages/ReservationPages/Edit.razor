@page "/reservations/edit"
@using AnyReservationTemp.Data
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@using AnyReservationTemp.Domain
@inject IDbContextFactory<AnyReservationTemp.Data.AnyReservationTempContext> DbFactory
@inject NavigationManager NavigationManager
@inject SignInManager<AnyReservationTempUser> SignInManager

<PageTitle>Edit</PageTitle>
<div class="container-fluid d-flex flex-wrap w-100 py-3">
    <a style="color: #fff3f1" class="btn px-4 py-2 m-2 rounded-pill" href="#">Space</a>
</div>
<h1>Edit</h1>
<h2>Reservation</h2>
<hr />
<body style=" background-color: #fff3f1">
    @if (!AuthCheck)
    {
        <div class="row d-flex justify-content-center align-items-center">
            <div class="col-md-4">
                <a href="Account/Login" class="btn btn-secondary bg-danger w-100">Sign In to Edit</a>
            </div>
        </div>
    }
    else
    {
        <div>
            <a href="/reservations" class="btn btn-secondary">
                <i class="bi bi-arrow-left"></i> Back
            </a>
        </div>
        <div class="row d-flex justify-content-center align-items-center">
            <div class="col-md-4">
                <EditForm method="post" Model="Reservation" OnValidSubmit="UpdateReservation" FormName="edit" Enhance>
                    <DataAnnotationsValidator />
                    <ValidationSummary role="alert" />
                    <input type="hidden" name="Reservation.Id" value="@Reservation.Id" />
                    <div class="mb-3">
                        <label for="restaurantid" class="form-label">Restaurant:</label>
                        <InputSelect id="restaurantid" @bind-Value="Reservation.RestaurantId" class="form-control">
                            <option value="">-- Select restaurant --</option>
                            @if (Restaurants != null)
                            {
                                foreach (var restaurant in Restaurants)
                                {
                                    <option value="@restaurant.Id">@restaurant.Name</option>
                                }
                            }
                        </InputSelect>
                        <ValidationMessage For="() => Reservation.RestaurantId" class="text-danger" />
                    </div>
                    <div class="mb-3">
                        <label for="name" class="form-label">Name:</label>
                        <InputText id="name" @bind-Value="Reservation.Name" class="form-control" />
                        <ValidationMessage For="() => Reservation.Name" class="text-danger" />
                    </div>
                    <div class="mb-3">
                        <label for="contact" class="form-label">Contact:</label>
                        <InputText id="contact" @bind-Value="Reservation.Contact" class="form-control" />
                        <ValidationMessage For="() => Reservation.Contact" class="text-danger" />
                    </div>
                    <div class="mb-3">
                        <label for="emailaddress" class="form-label">EmailAddress:</label>
                        <InputText id="emailaddress" @bind-Value="Reservation.EmailAddress" class="form-control" />
                        <ValidationMessage For="() => Reservation.EmailAddress" class="text-danger" />
                    </div>
                    <div class="mb-3">
                        <label for="numofcustomer" class="form-label">NumOfCustomer:</label>
                        <InputNumber id="numofcustomer" @bind-Value="Reservation.NumOfCustomer" class="form-control" />
                        <ValidationMessage For="() => Reservation.NumOfCustomer" class="text-danger" />
                    </div>
                    <div class="mb-3">
                        <label for="datereserved" class="form-label">DateReserved:</label>
                        <InputDate id="datereserved" @bind-Value="Reservation.DateReserved" class="form-control" />
                        <ValidationMessage For="() => Reservation.DateReserved" class="text-danger" />
                    </div>
                    <div class="mb-3">
                        <label for="starttime" class="form-label">StartTime:</label>
                        <InputDate Type="InputDateType.Time" id="starttime" @bind-Value="Reservation.StartTime" class="form-control" />
                        <ValidationMessage For="() => Reservation.StartTime" class="text-danger" />
                    </div>
                    <div class="mb-3">
                        <label for="endtime" class="form-label">EndTime:</label>
                        <InputDate Type="InputDateType.Time" id="endtime" @bind-Value="Reservation.EndTime" class="form-control" />
                        <ValidationMessage For="() => Reservation.EndTime" class="text-danger" />
                    </div>
                    <div class="mb-3" hidden>
                        <label for="customerid" class="form-label">CustomerId:</label>
                        <InputNumber id="customerid" @bind-Value="Reservation.CustomerId" class="form-control" />
                        <ValidationMessage For="() => Reservation.CustomerId" class="text-danger" />
                    </div>
                    <div class="mb-3" hidden>
                        <label for="tableno" class="form-label">TableNo:</label>
                        <InputNumber id="tableno" @bind-Value="Reservation.TableNo" class="form-control" />
                        <ValidationMessage For="() => Reservation.TableNo" class="text-danger" />
                    </div>
                    @if (isAdmin)
                    {
                        <div class="mb-3">
                            <label class="form-label">Status:</label>
                            <InputSelect id="statusid" @bind-Value="Reservation.ProgressId" class="form-control">
                                <option value="">-- Status --</option>
                                @if (Status != null)
                                {
                                    foreach (var status in Status)
                                    {
                                        <option value="@status.Id">
                                            @status.Description
                                        </option>
                                    }
                                }
                            </InputSelect>
                            <ValidationMessage For="() => Reservation.ProgressId" class="text-danger" />
                        </div>
                    }
                    <div class="mb-3" hidden>
                        <label for="datecreated" class="form-label">DateCreated:</label>
                        <InputDate id="datecreated" @bind-Value="Reservation.DateCreated" class="form-control" />
                        <ValidationMessage For="() => Reservation.DateCreated" class="text-danger" />
                    </div>
                    <div class="mb-3" hidden>
                        <label for="dateupdated" class="form-label">DateUpdated:</label>
                        <InputDate id="dateupdated" @bind-Value="Reservation.DateUpdated" class="form-control" />
                        <ValidationMessage For="() => Reservation.DateUpdated" class="text-danger" />
                    </div>
                    <div class="mb-3" hidden>
                        <label for="createdby" class="form-label">CreatedBy:</label>
                        <InputText id="createdby" @bind-Value="Reservation.CreatedBy" class="form-control" />
                        <ValidationMessage For="() => Reservation.CreatedBy" class="text-danger" />
                    </div>
                    <div class="mb-3" hidden>
                        <label for="updatedby" class="form-label">UpdatedBy:</label>
                        <InputText id="updatedby" @bind-Value="Reservation.UpdatedBy" class="form-control" />
                        <ValidationMessage For="() => Reservation.UpdatedBy" class="text-danger" />
                    </div>
                    <button type="submit" class="btn btn-primary">Save</button>
                </EditForm>
            </div>
        </div>
    }
</body>

@code {
    [SupplyParameterFromQuery]
    private int Id { get; set; }

    [SupplyParameterFromForm]
    private Reservation? Reservation { get; set; }

    //Declare and initialize
    private AnyReservationTempContext ARcontext = default!;
    private IList<Restaurant> Restaurants;
    private IList<Status> Status;

    private bool isAdmin = false;

    private bool AuthCheck;

    //Create userId string to store the user id, default value is "System".
    private string userId = "System";

    //Inject the AuthenticationStateProvider to get the user id.
    @inject AuthenticationStateProvider authenticationStateProvider

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        Reservation ??= await context.Reservation.FirstOrDefaultAsync(m => m.Id == Id);

        var authState = await authenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        AuthCheck = (await SignInManager.UserManager.GetUserAsync(SignInManager.Context.User)) != null;
        isAdmin = user.IsInRole("Administrator");

        // Get the userId claim
        var userIdClaim = user.FindFirst("userId");

        if (userIdClaim != null)
        {
            userId = userIdClaim.Value;
        }

        if (Reservation is null)
        {
            NavigationManager.NavigateTo("notfound");
        }

        ARcontext = DbFactory.CreateDbContext();
        Restaurants = ARcontext.Restaurant.ToList();
        Status = ARcontext.Status.ToList();
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more information, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task UpdateReservation()
    {
        using var context = DbFactory.CreateDbContext();

        Reservation.UpdatedBy = userId;

        Reservation.DateUpdated = DateTime.Now;

        context.Attach(Reservation!).State = EntityState.Modified;

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!ReservationExists(Reservation!.Id))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/reservations");
    }

    private bool ReservationExists(int id)
    {
        using var context = DbFactory.CreateDbContext();
        return context.Reservation.Any(e => e.Id == id);
    }    
}
