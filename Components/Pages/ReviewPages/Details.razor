@page "/reviews/details/{restaurantId:int}"
@using Microsoft.EntityFrameworkCore
@using AnyReservationTemp.Domain
@using AnyReservationTemp.Data
@inject IDbContextFactory<AnyReservationTemp.Data.AnyReservationTempContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Reviews</PageTitle>

<div>
    <h2>Reviews</h2>
    <a href="reviews/create" style="margin-top: 80px; display: block;">Write a review!</a>
    <hr />
    @if (reviews is null || reviews.Count == 0)
    {
        <p><em>No reviews yet...</em></p>
        <a href="@($"/reviews")">Back to List</a>
    }
    else
    {
        @foreach (var review in reviews)
        {
        <dl class="row">
            <dt class="col-sm-2">Rating</dt>
            <dd class="col-sm-10">@review.Rating</dd>
            <dt class="col-sm-2">Comment</dt>
            <dd class="col-sm-10">@review.Comment</dd>
            <dt class="col-sm-2">ReservationId</dt>
            <dd class="col-sm-10">@review.ReservationId</dd>
            <dt class="col-sm-2">Name</dt>
            <dd class="col-sm-10">@review.Name</dd>
            <dt class="col-sm-2">Contact</dt>
            <dd class="col-sm-10">@review.Contact</dd>
            <dt class="col-sm-2">EmailAddress</dt>
            <dd class="col-sm-10">@review.EmailAddress</dd>
        </dl>
       
        <div>
            @if (IsStaff)
            {
                <a href="@($"reviews/edit?id={review.Id}")">Edit</a>
                <a href="@($"reviews/delete?id={review.Id}")">Remove</a>
            }
        </div>
        <hr />
        }
        <div>
            <a href="@($"/reviews")">Back to List</a>
        </div>
    }
</div>


@code {

    private List<Review>? reviews;
    private bool IsStaff { get; set; }
    [Parameter]
    public int restaurantId { get; set; }

    [SupplyParameterFromQuery]
    private int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        reviews = await context.Review
            .Where(r => r.RestaurantId == restaurantId) // Ensure you have a RestaurantId field
            .ToListAsync();
        Console.WriteLine($"Reviews count: {reviews.Count}");
        // Ensure restaurantId is valid before querying
        if (restaurantId <= 0)
        {
            NavigationManager.NavigateTo("/notfound");
            return;
        }

        try
        {
            if (reviews == null || reviews.Count == 0)
            {
                Console.WriteLine("No reviews found for this restaurant.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading reviews: {ex.Message}");
        }
    }
}
