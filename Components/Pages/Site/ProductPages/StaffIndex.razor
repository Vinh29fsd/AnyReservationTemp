@page "/products/staff"
@using Microsoft.EntityFrameworkCore
@using AnyReservationTemp.Domain
@using AnyReservationTemp.Data
@implements IAsyncDisposable
@inject IDbContextFactory<AnyReservationTempContext> DbFactory
@inject NavigationManager NavManager

@attribute [Authorize(Roles = "Administrator, RestaurantStaff")]

<PageTitle>Products</PageTitle>

<body style="background-color: #fff3f1;">
    <h1 class="text-center">Available Products</h1>
    <hr>

    <div class="product-container">
        <!-- Plus Sign Card for Adding Products -->
        <div class="product-card add-product" onclick="location.href='@($"products/create?restaurantId={restaurantId}")'">
            <span class="plus-sign">+</span>
        </div>

        @foreach (var product in Products)
        {
            <div class="product-card">
                <!-- Delete Icon -->
                <span class="delete-icon" onclick="location.href='@($"products/delete?Id={product.Id}&restaurantId={restaurantId}")'">&Chi; </span>

                <h3>@product.Name</h3>
                <p>Category: @Category.FirstOrDefault(c => c.Id == product.ProductCategoryId)?.Category</p>
                <p>Cost: $@product.Cost</p>
                <p>Quantity: @product.Quantity</p>

                <!-- Edit Button -->
                <button class="btn btn-edit" onclick="location.href='@($"products/edit?Id={product.Id}&restaurantId={restaurantId}")'">Edit</button>
            </div>
        }
    </div>
</body>

@code {
    [SupplyParameterFromQuery]
    private int restaurantId { get; set; }

    private AnyReservationTempContext context = default!;
    private List<Product> Products { get; set; } = new();
    private List<ProductCategory> Category { get; set; } = new();

    protected override void OnInitialized()
    {
        context = DbFactory.CreateDbContext();
        Category = context.ProductCategory.ToList();

        var productIdsForRestaurant = context.RestaurantProductCategory
            .Where(rp => rp.RestaurantId == restaurantId)
            .Select(rp => rp.ProductId)
            .ToList();

        Products = context.Product
            .Where(p => productIdsForRestaurant.Contains(p.Id))
            .ToList();
    }

    private async Task DeleteProduct(int productId)
    {
        var productToDelete = context.Product.FirstOrDefault(p => p.Id == productId);
        if (productToDelete != null)
        {
            context.Product.Remove(productToDelete);
            await context.SaveChangesAsync();
            Products.Remove(productToDelete);
            StateHasChanged();
        }
    }

    public async ValueTask DisposeAsync() => await context.DisposeAsync();
}
