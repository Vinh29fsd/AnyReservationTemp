@page "/products/edit"
@using Microsoft.EntityFrameworkCore
@using AnyReservationTemp.Domain
@inject IDbContextFactory<AnyReservationTemp.Data.AnyReservationTempContext> DbFactory
@inject NavigationManager NavigationManager

@attribute [Authorize(Roles = "Administrator, RestaurantStaff")]

<PageTitle>Edit Product</PageTitle>

<!-- Background Color -->
<body style="background-color: #fff3f1">
    <div class="container d-flex justify-content-center align-items-center" style="min-height: 80vh;">
        <div class="col-md-6">

            <div class="d-flex justify-content-between align-items-center">
                <h2>Edit Product</h2>
                <a href="/products/staff?restaurantId=@restaurantId" class="btn btn-secondary">
                    <i class="bi bi-arrow-left"></i> Back to List
                </a>
            </div>
            <hr />

            @if (Product is null)
            {
                <p><em>Loading...</em></p>
            }
            else
            {
                <EditForm method="post" Model="Product" OnValidSubmit="UpdateProduct" FormName="edit" Enhance>
                    <DataAnnotationsValidator />
                    <ValidationSummary class="text-danger" role="alert" />
                    <input type="hidden" name="Product.Id" value="@Product.Id" />

                    <div class="mb-3">
                        <label for="name" class="form-label">Name:</label>
                        <InputText id="name" @bind-Value="Product.Name" class="form-control" />
                        <ValidationMessage For="() => Product.Name" class="text-danger" />
                    </div>

                    <div class="mb-3">
                        <label for="productcategoryid" class="form-label">Category:</label>
                        <InputSelect id="productcategoryid" @bind-Value="Product.ProductCategoryId" class="form-control">
                            <option value="">-- Category --</option>
                            @if (ProductCategories != null)
                            {
                                foreach (var category in ProductCategories)
                                {
                                    <option value="@category.Id">@category.Category</option>
                                }
                            }
                        </InputSelect>
                        <ValidationMessage For="() => Product.ProductCategoryId" class="text-danger" />
                    </div>

                    <div class="mb-3">
                        <label for="cost" class="form-label">Cost:</label>
                        <InputNumber id="cost" @bind-Value="Product.Cost" class="form-control" />
                        <ValidationMessage For="() => Product.Cost" class="text-danger" />
                    </div>

                    <div class="mb-3">
                        <label for="quantity" class="form-label">Quantity:</label>
                        <InputNumber id="quantity" @bind-Value="Product.Quantity" class="form-control" />
                        <ValidationMessage For="() => Product.Quantity" class="text-danger" />
                    </div>

                    <div class="d-flex justify-content-between">
                        <button type="submit" class="btn btn-primary">Save</button>
                    </div>
                </EditForm>
            }
        </div>
    </div>
</body>

@code {
    [SupplyParameterFromQuery]
    private int Id { get; set; }

    [SupplyParameterFromQuery]
    private int restaurantId { get; set; }

    [SupplyParameterFromForm]
    private Product? Product { get; set; }

    private List<ProductCategory> ProductCategories { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        Product ??= await context.Product.FirstOrDefaultAsync(m => m.Id == Id);
        ProductCategories = await context.ProductCategory.ToListAsync();

        if (Product is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task UpdateProduct()
    {
        using var context = DbFactory.CreateDbContext();
        context.Attach(Product!).State = EntityState.Modified;

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!ProductExists(Product!.Id))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo($"/products/staff?restaurantId={restaurantId}");
    }

    private bool ProductExists(int id)
    {
        using var context = DbFactory.CreateDbContext();
        return context.Product.Any(e => e.Id == id);
    }
}
