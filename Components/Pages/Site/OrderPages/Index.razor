@page "/orders"
@using Microsoft.EntityFrameworkCore
@using AnyReservationTemp.Domain
@using AnyReservationTemp.Data
@inject IDbContextFactory<AnyReservationTempContext> DbFactory

<!-- Include other necessary imports -->

<PageTitle>Orders</PageTitle>

<!-- Filler -->
<div class="container-fluid d-flex flex-wrap w-100 py-2">
    <a style="color: #fff3f1;" class="btn px-4 py-3 m-2 rounded-pill" href="#">Space</a>
</div>

<body style="background-color: #fff3f1">
    <div class="container">
        <a class="btn btn-secondary" href="reservations">
            <i class="bi bi-arrow-left"></i> Back to Reservations
        </a>
        @if (OrderDetails.Any())
        {
            <h2 class="mt-4">
                Order Details
                <a href="@($"orders/edit?id={Orders.FirstOrDefault(o => o.Id == o.Id).Id}")" class="btn btn-secondary btn-sm">Edit</a>
                <a href="@($"orders/delete?id={Orders.FirstOrDefault(o => o.Id == o.Id).Id}")" class="btn btn-danger btn-sm">Delete</a>
            </h2>

            <table class="table">
                <thead>
                    <tr>
                        <th>Product</th>
                        <th>Quantity</th>
                        <th>Total</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var categoryGroup in OrderDetails.GroupBy(od => Products.FirstOrDefault(p => p.Id == od.ProductId)?.ProductCategoryId))
                    {
                        <tr>
                            <td colspan="4" class="fw-bold">
                                @ProductCategories.FirstOrDefault(pc => pc.Id == categoryGroup.Key)?.Category
                            </td>
                        </tr>

                        @foreach (var detail in categoryGroup)
                        {
                            var product = Products.FirstOrDefault(p => p.Id == detail.ProductId);
                            if (product != null)
                            {
                                double total = detail.Quantity * product.Cost;

                                <tr>
                                    <td>@product.Name</td>
                                    <td>@detail.Quantity</td>
                                    <td>$@($"{total:F2}")</td>
                                </tr>
                            }
                        }
                    }
                </tbody>
            </table>
            <hr>
            <div class="d-flex justify-content-end mt-3">
                <div>
                    <strong>Subtotal: </strong>
                    $@($"{GetOrderTotalSum(Orders.FirstOrDefault().Id):F2}")
                </div>
            </div>
            <div class="d-flex justify-content-end mt-3">
                <div>
                    <strong>Service Charge (5%): </strong>
                    $@($"{GetOrderTotalSum(Orders.FirstOrDefault().Id) * 0.05:F2}")
                </div>
            </div>
            <div class="d-flex justify-content-end mt-3">
                <div>
                    <strong>Down Payment (20%): </strong>
                    $@($"{GetOrderTotalSum(Orders.FirstOrDefault().Id) * 0.2:F2}")
                </div>
            </div>
            <div class="d-flex justify-content-end mt-3">
                <div>
                    <strong>Total Payable: </strong>
                    $@Orders.FirstOrDefault(t => t.Id == t.Id).TotalAmount
                </div>
            </div>
        }
        else
        {
            <p>No orders found.</p>
        }
    </div>
</body>

@code {
    [SupplyParameterFromQuery]
    private int? ReservationId { get; set; }

    private List<Order> Orders = new();
    private List<OrderDetail> OrderDetails = new();
    private List<Product> Products = new();
    private List<ProductCategory> ProductCategories = new();  // To hold the Product Categories

    protected override async Task OnInitializedAsync()
    {
        using var context = await DbFactory.CreateDbContextAsync();

        // Fetch Orders for a specific reservation or all orders
        Orders = ReservationId.HasValue
            ? await context.Order.Where(o => o.ResevationId == ReservationId.Value).ToListAsync()
            : await context.Order.ToListAsync();

        // Fetch OrderDetails only for the relevant orders
        var orderIds = Orders.Select(o => o.Id).ToList();
        OrderDetails = await context.OrderDetail.Where(od => orderIds.Contains(od.OrderId)).ToListAsync();

        // Fetch Products (with ProductCategoryId) from the Products table
        Products = await context.Product.ToListAsync();

        // Fetch ProductCategories (assuming they are in another DbContext or table)
        // Here we assume another context or table for categories
        ProductCategories = await context.ProductCategory.ToListAsync();
    }

    // Helper method to calculate the total sum of the products in an order
    private double GetOrderTotalSum(int orderId)
    {
        var orderDetails = OrderDetails.Where(od => od.OrderId == orderId);
        double totalSum = 0;

        foreach (var detail in orderDetails)
        {
            var product = Products.FirstOrDefault(p => p.Id == detail.ProductId);
            if (product != null)
            {
                totalSum += detail.Quantity * product.Cost;
            }
        }

        return totalSum;
    }
}
