@page "/reservations/create"
@using AnyReservationTemp.Data
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@using AnyReservationTemp.Domain
@inject IDbContextFactory<AnyReservationTemp.Data.AnyReservationTempContext> DbFactory
@inject NavigationManager NavigationManager
@inject SignInManager<AnyReservationTempUser> SignInManager

<PageTitle>Create</PageTitle>

<!-- Filler -->
<div class="container-fluid d-flex flex-wrap w-100 py-2">
    <a style="color: #fff3f1" class="btn px-4 py-2 m-2 rounded-pill" href="#">Space</a>
</div>
<body style="background-color: #fff3f1">
    <h1>Create</h1>
    <h2>Reservation</h2>
    <hr />
    <div>
        @if (AuthCheck)
        {
            <div>
                <a href="/reservations" class="btn btn-secondary">
                    <i class="bi bi-arrow-left"></i> Back 
                </a>
            </div>
            <div class="row d-flex justify-content-center align-items-center">
                <div class="col-md-4">
                    <div class="row d-flex justify-content-center align-items-center mb-4">
                        <div class="col-12 text-center">
                            <button class="px-4 py-2 rounded w-auto text-center"
                                    style="font-size: 1.5rem; color: black; background: #ff3535; font-family: 'Brush Script MT'; border: transparent;"
                                    onclick="location.href='/'">
                                AnyReservation
                            </button>
                        </div>
                    </div>
                    <EditForm method="post" Model="Reservation" OnValidSubmit="AddReservation" FormName="create" Enhance>
                        <DataAnnotationsValidator />
                        <ValidationSummary class="text-danger" role="alert" />
                        <div class="mb-3">
                            <label for="restaurantid" class="form-label">Restaurant:</label>
                            <InputSelect disabled id="restaurantid" @bind-Value="restaurantId" class="form-control">
                                <option value="">-- Select restaurant --</option>
                                @if ( Restaurants!= null)
                                {
                                    foreach (var restaurant in Restaurants)
                                    {
                                        <option value="@restaurant.Id">@restaurant.Name</option>
                                    }
                                }
                            </InputSelect>
                            <ValidationMessage For="() => restaurantId" class="text-danger" />
                        </div>
                        <div class="mb-3">
                            <label for="name" class="form-label">Name:</label>
                            <InputText disabled="@(!isAdmin && !isStaff)" id="name" @bind-Value="Reservation.Name" class="form-control" />
                            <ValidationMessage For="() => Reservation.Name" class="text-danger" />
                        </div>
                        <div class="mb-3">
                            <label  for="contact" class="form-label">Phone Number:</label>
                            <InputText disabled="@(!isAdmin && !isStaff)" id="contact" @bind-Value="Reservation.Contact" class="form-control" />
                            <ValidationMessage For="() => Reservation.Contact" class="text-danger" />
                        </div>
                        <div class="mb-3">
                            <label for="emailaddress" class="form-label">Email:</label>
                            <InputText disabled="@(!isAdmin && !isStaff)" id="emailaddress" @bind-Value="Reservation.EmailAddress" class="form-control" />
                            <ValidationMessage For="() => Reservation.EmailAddress" class="text-danger" />
                        </div>
                        <div class="mb-3">
                            <label for="numofcustomer" class="form-label">Number of Guests:</label>
                            <InputNumber id="numofcustomer" @bind-Value="Reservation.NumOfCustomer" class="form-control" />
                            <ValidationMessage For="() => Reservation.NumOfCustomer" class="text-danger" />
                        </div>
                        <div class="mb-3">
                            <label for="datereserved" class="form-label">Date of Reservation:</label>
                            <InputDate id="datereserved" @bind-Value="Reservation.DateReserved" class="form-control"
                                       min="@DateTime.Now.ToString("yyyy-MM-dd")" />
                            <ValidationMessage For="() => Reservation.DateReserved" class="text-danger" />
                        </div>
                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label for="starttime" class="form-label">From:</label>
                                    <InputDate Type="InputDateType.Time" id="starttime" @bind-Value="Reservation.StartTime" class="form-control" />
                                    <ValidationMessage For="() => Reservation.StartTime" class="text-danger" />
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label for="endtime" class="form-label">To:</label>
                                    <InputDate Type="InputDateType.Time" id="endtime" @bind-Value="Reservation.EndTime" class="form-control" />
                                    <ValidationMessage For="() => Reservation.EndTime" class="text-danger" />
                                </div>
                            </div>
                        </div>
                        <div class="mb-3" hidden>
                            <label for="customerid" class="form-label">CustomerId:</label>
                            <InputNumber id="customerid" @bind-Value="Reservation.CustomerId" class="form-control" />
                            <ValidationMessage For="() => Reservation.CustomerId" class="text-danger" />
                        </div>
                        <div class="mb-3" hidden>
                            <label for="tableno" class="form-label">TableNo:</label>
                            <InputNumber id="tableno" @bind-Value="Reservation.TableNo" class="form-control" />
                            <ValidationMessage For="() => Reservation.TableNo" class="text-danger" />
                        </div>
                        <div class="mb-3" hidden>
                            <label for="datecreated" class="form-label">DateCreated:</label>
                            <InputDate id="datecreated" @bind-Value="Reservation.DateCreated" class="form-control" />
                            <ValidationMessage For="() => Reservation.DateCreated" class="text-danger" />
                        </div>
                        <div class="mb-3" hidden>
                            <label for="dateupdated" class="form-label">DateUpdated:</label>
                            <InputDate id="dateupdated" @bind-Value="Reservation.DateUpdated" class="form-control" />
                            <ValidationMessage For="() => Reservation.DateUpdated" class="text-danger" />
                        </div>
                        <div class="mb-3" hidden>
                            <label for="createdby" class="form-label">CreatedBy:</label>
                            <InputText id="createdby" @bind-Value="Reservation.CreatedBy" class="form-control" />
                            <ValidationMessage For="() => Reservation.CreatedBy" class="text-danger" />
                        </div>
                        <div class="mb-3" hidden>
                            <label for="updatedby" class="form-label">UpdatedBy:</label>
                            <InputText id="updatedby" @bind-Value="Reservation.UpdatedBy" class="form-control" />
                            <ValidationMessage For="() => Reservation.UpdatedBy" class="text-danger" />
                        </div>
                        @if (isAdmin)
                        {
                            <div class="mb-3">
                                <label class="form-label">Status:</label>
                                <InputSelect id="statusid" @bind-Value="Reservation.ProgressId" class="form-control">
                                    <option value="">-- Status --</option>
                                    @if (Status != null)
                                    {
                                        foreach (var status in Status)
                                        {
                                            <option value="@status.Id">
                                                @status.Description
                                            </option>
                                        }
                                    }
                                </InputSelect>
                                <ValidationMessage For="() => Reservation.ProgressId" class="text-danger" />
                            </div>
                        }
                        <div>
                            <button type="submit" class="btn btn-primary bg-success w-100" href="/">Reserve Now</button>
                        </div>
                    </EditForm>
                </div>
            </div>

        }
        else
        {
            <div class="row d-flex justify-content-center align-items-center">
                <div class="col-md-4">
                    <a href="Account/Login" class="btn btn-secondary bg-danger w-100">Sign In to Book</a>
                </div>
            </div>

        }
    </div>
</body>
@code {
    [SupplyParameterFromForm]
    private Reservation Reservation { get; set; } = new();

    [SupplyParameterFromQuery]
    private int restaurantId { get; set; }

    private bool isAdmin = false;

    private bool isStaff = false;

    //Declare and initialize
    private AnyReservationTempContext context = default!;
    private Restaurant selectedRestaurant;
    private IList<Restaurant> Restaurants;
    private IList<Status> Status;

    // To protect from overposting attacks, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task AddReservation()
    {
        using var context = DbFactory.CreateDbContext();

        Reservation.ProgressId = 2;

        Reservation.CreatedBy = userId;
        Reservation.UpdatedBy = userId;

        Reservation.DateCreated = DateTime.Now;
        Reservation.DateUpdated = DateTime.Now;

        Reservation.RestaurantId = restaurantId;

        context.Reservation.Add(Reservation);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo($"/reservations/details?id={Reservation.Id}");
    }

    //Create userId string to store the user id, default value is "System".
    private string userId = "System";

    //Inject the AuthenticationStateProvider to get the user id.
    @inject AuthenticationStateProvider authenticationStateProvider

    protected override async void OnInitialized()
    {
        var authState = await authenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        isAdmin = user.IsInRole("Administrator");
        isStaff = user.IsInRole("RestaurantStaff");

        // Get the userId claim
        var userIdClaim = user.FindFirst("userId");
        if (userIdClaim != null)
        {
            userId = userIdClaim.Value;
        }

        context = DbFactory.CreateDbContext();
        Restaurants = context.Restaurant.ToList();
        Status = context.Status.ToList();

        Reservation.ProgressId = 2;
        Reservation.RestaurantId = restaurantId;

        if (Reservation.DateReserved == default)
        {
            Reservation.DateReserved = DateTime.Now;
        }

        var userInfo = await context.Users
    .Where(u => u.Id == userId)
    .Select(u => new
    {
        FullName = u.FirstName + " " + u.LastName,
        u.PhoneNumber,
        u.Email
    })
    .FirstOrDefaultAsync();

        if (userInfo != null)
        {
            Reservation.Name = userInfo.FullName;
            Reservation.Contact = userInfo.PhoneNumber;
            Reservation.EmailAddress = userInfo.Email;
        }
    }
}

@code {
    private bool AuthCheck;

    protected override async Task OnInitializedAsync()
    {
        AuthCheck = (await SignInManager.UserManager.GetUserAsync(SignInManager.Context.User)) != null;
    }
}