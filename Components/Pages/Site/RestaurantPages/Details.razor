@page "/restaurants/details"
@using Microsoft.EntityFrameworkCore
@using AnyReservationTemp.Domain
@inject IDbContextFactory<AnyReservationTemp.Data.AnyReservationTempContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Details</PageTitle>

<!-- Filler -->
<div class="container-fluid d-flex flex-wrap w-100 py-2">
    <a style="color: #fff3f1;" class="btn px-4 py-2 m-2 rounded-pill" href="#">Space</a>
</div>

<body style="background-color: #fff3f1">
    <div class="container text-center mt-5">

        @if (restaurant is null)
        {
            <p><em>Loading...</em></p>
        }
        else
        {
            <!-- Restaurant Image at the top -->
            <div class="mb-4">
                <div class="row justify-content-left mb-4">
                    <div class="col-auto">
                        <a href="@($"/restaurants")" class="btn btn-secondary">
                            <i class="bi bi-arrow-left"></i> Back to List
                        </a>
                    </div>
                </div>
                <img src="@restaurant.ImagePath" alt="@restaurant.Name" class="img-fluid rounded" style="max-height: 200px; object-fit: cover; border: 1px solid" />
            </div>

            <!-- Restaurant Details -->
            <h2 class="mb-3">@restaurant.Name</h2>
            <h3>@if (restaurant.ServiceStatus)
                {
                    <span class="text-success">Active</span>
                }
                else
                {
                    <span class="text-danger">Out Of Service</span>
                }
            </h3>
            <p class="lead">@restaurant.Location</p>

            <hr style="width: 50%; margin: auto"/>

            <dl class="row">
                <dt class="col-sm-6 text-end">Contact:</dt>
                <dd class="col-sm-6 text-start">@restaurant.Contact</dd>
                <dt class="col-sm-6 text-end">Email Address:</dt>
                <dd class="col-sm-6 text-start">@restaurant.EmailAddress</dd>
            </dl>

            @if (menuItems is not null && menuItems.Any())
            {
                <div class="row justify-content-center">
                    <div class="col-md-8">
                        <h3 class="text-center mt-4">Menu</h3>
                        <hr style="width: 50%; margin: auto;" />

                        @foreach (var category in menuItems.GroupBy(m => m.ProductCategoryId))
                        {
                            <h5 class="mt-3 text-secondary">@ProductCategories.FirstOrDefault(p => p.Id == category.Key)?.Category</h5>
                            <div class="list-group">
                                @foreach (var item in category)
                                {
                                    <div class="list-group-item d-flex justify-content-between align-items-center">
                                        <span>@item.Name</span>
                                        <strong>$@item.Cost.ToString("0.00")</strong>
                                    </div>
                                }
                            </div>
                        }
                    </div>
                </div>
            }
            else
            {
                <div class="row justify-content-center">
                    <div class="col-md-8 text-center">
                        <h5 class="mt-4">No menu items available.</h5>
                    </div>
                </div>
            }

            <div>
                <a style="margin-top: 20px" class="btn btn-primary btn-success" onclick="location.href='@($"/reservations/create?restaurantId={Id}")'">Reserve now!</a>
            </div>
            <div>
                <a style="margin-top: 10px" href="@($"/restaurants")" class="btn btn-primary">Back to Restaurants</a>
            </div>
        }
    </div>

</body>

<!-- Filler -->
<div class="container-fluid d-flex flex-wrap w-100 py-2">
    <a style="color: #fff3f1;" class="btn px-4 py-2 m-2 rounded-pill" href="#">Space</a>
</div>
@code {
    private Restaurant? restaurant;
    private List<Product> menuItems = new();
    private List<ProductCategory> ProductCategories = new();

    [SupplyParameterFromQuery]
    private int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        restaurant = await context.Restaurant.FirstOrDefaultAsync(m => m.Id == Id);
        ProductCategories = await context.ProductCategory.ToListAsync();

        if (restaurant is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
        var productIdsForRestaurant = context.RestaurantProductCategory
            .Where(rp => rp.RestaurantId == restaurant.Id)
            .Select(rp => rp.ProductId)
            .ToList();

        menuItems = context.Product
            .Where(p => productIdsForRestaurant.Contains(p.Id))
            .OrderBy(m => m.ProductCategoryId)
            .ToList();
    }
}
