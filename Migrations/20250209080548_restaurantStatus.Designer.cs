// <auto-generated />
using System;
using AnyReservationTemp.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AnyReservationTemp.Migrations
{
    [DbContext(typeof(AnyReservationTempContext))]
    [Migration("20250209080548_restaurantStatus")]
    partial class restaurantStatus
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AnyReservationTemp.Data.AnyReservationTempUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "3781efa7-66dc-47f0-860f-e506d04102e4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "52bbbcdc-032b-4cad-82f8-c797e75fef4c",
                            Email = "admin@localhost.com",
                            EmailConfirmed = true,
                            FirstName = "Admin",
                            LastName = "User",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@LOCALHOST.COM",
                            NormalizedUserName = "ADMIN@LOCALHOST.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEOdKlpE209H/QP74K5u6o29wH14yIOwDTlkGWQI5N4Pb8Ez21xvjHnE5NAlTifpzPg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b2783b1e-38c7-42f6-aff7-bd18b604fe44",
                            TwoFactorEnabled = false,
                            UserName = "admin@localhost.com"
                        },
                        new
                        {
                            Id = "07f8ba5b-c88f-47fb-8405-43d39e3dc0fa",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a5f9c4ca-b180-46f5-ad2d-e5dea1320096",
                            Email = "staff@restaurant.com",
                            EmailConfirmed = true,
                            FirstName = "Staff",
                            LastName = "User",
                            LockoutEnabled = false,
                            NormalizedEmail = "STAFF@RESTAURANT.COM",
                            NormalizedUserName = "STAFF@RESTAURANT.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEH3259EJsOnzlX/Fe2fD1F35s5P9QGP8RZ0Zbmjg7SPyi9CpY91CFnq2kOtMBUowNA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "27f41c67-1089-4f6b-87c4-7958438ada7f",
                            TwoFactorEnabled = false,
                            UserName = "staff@restaurant.com"
                        },
                        new
                        {
                            Id = "41b73075-dea9-4fba-9a4f-0331abd78f72",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c266cf70-83d2-4415-ba32-ba3491be279b",
                            Email = "staff@anyrestaurant.com",
                            EmailConfirmed = true,
                            FirstName = "Staff",
                            LastName = "User",
                            LockoutEnabled = false,
                            NormalizedEmail = "STAFF@ANYRESTAURANT.COM",
                            NormalizedUserName = "STAFF@ANYRESTAURANT.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEIbo5ERhpeRzmP9tFzdsXi32pKv44OdIMyVKiALaaGLAjO1+iJklrMsl6OTBG9bqTg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7d816685-f6c0-49ef-969e-9144d3025f07",
                            TwoFactorEnabled = false,
                            UserName = "staff@anyrestaurant.com"
                        });
                });

            modelBuilder.Entity("AnyReservationTemp.Domain.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Contact")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Customer");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Contact = "8858 6939",
                            EmailAddress = "owen@gmail.com",
                            Name = "Owen Lau Jun Kai"
                        },
                        new
                        {
                            Id = 2,
                            Contact = "9661 0401",
                            EmailAddress = "vovinhho@gmail.com",
                            Name = "Ho Vo Vinh"
                        });
                });

            modelBuilder.Entity("AnyReservationTemp.Domain.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Contact")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ResevationId")
                        .HasColumnType("int");

                    b.Property<double>("TotalAmount")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("AnyReservationTemp.Domain.OrderDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Contact")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("OrderDetail");
                });

            modelBuilder.Entity("AnyReservationTemp.Domain.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Contact")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Cost")
                        .HasColumnType("float");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductCategoryId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Product");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Cost = 2.5,
                            Name = "Coke",
                            ProductCategoryId = 5,
                            Quantity = 50
                        },
                        new
                        {
                            Id = 2,
                            Cost = 15.0,
                            Name = "Sparkling Rose",
                            ProductCategoryId = 5,
                            Quantity = 25
                        },
                        new
                        {
                            Id = 3,
                            Cost = 2.5,
                            Name = "Sprite",
                            ProductCategoryId = 5,
                            Quantity = 30
                        },
                        new
                        {
                            Id = 4,
                            Cost = 5.0,
                            Name = "Chocolate Milkshake",
                            ProductCategoryId = 5,
                            Quantity = 50
                        },
                        new
                        {
                            Id = 5,
                            Cost = 10.0,
                            Name = "Strawberry Blast with Cherry",
                            ProductCategoryId = 5,
                            Quantity = 20
                        },
                        new
                        {
                            Id = 6,
                            Cost = 6.5,
                            Name = "Chicken Chop",
                            ProductCategoryId = 2,
                            Quantity = 50
                        },
                        new
                        {
                            Id = 7,
                            Cost = 13.0,
                            Name = "Mala Xiang Guo",
                            ProductCategoryId = 2,
                            Quantity = 10
                        },
                        new
                        {
                            Id = 8,
                            Cost = 26.0,
                            Name = "Fresh Oyster",
                            ProductCategoryId = 2,
                            Quantity = 15
                        },
                        new
                        {
                            Id = 9,
                            Cost = 54.0,
                            Name = "Beef Wellington",
                            ProductCategoryId = 2,
                            Quantity = 23
                        },
                        new
                        {
                            Id = 10,
                            Cost = 23.0,
                            Name = "Sausage Platter",
                            ProductCategoryId = 2,
                            Quantity = 13
                        },
                        new
                        {
                            Id = 11,
                            Cost = 29.0,
                            Name = "Crabmeat Pasta",
                            ProductCategoryId = 2,
                            Quantity = 15
                        },
                        new
                        {
                            Id = 12,
                            Cost = 22.5,
                            Name = "Salmon don",
                            ProductCategoryId = 2,
                            Quantity = 15
                        },
                        new
                        {
                            Id = 13,
                            Cost = 10.0,
                            Name = "Cai Fan Special",
                            ProductCategoryId = 2,
                            Quantity = 16
                        },
                        new
                        {
                            Id = 14,
                            Cost = 252.0,
                            Name = "Wagyu Beef",
                            ProductCategoryId = 2,
                            Quantity = 10
                        },
                        new
                        {
                            Id = 15,
                            Cost = 128.0,
                            Name = "Classic Ribeye",
                            ProductCategoryId = 2,
                            Quantity = 16
                        },
                        new
                        {
                            Id = 16,
                            Cost = 28.0,
                            Name = "Crispy Sliced Onion Rings",
                            ProductCategoryId = 2,
                            Quantity = 32
                        },
                        new
                        {
                            Id = 17,
                            Cost = 20.0,
                            Name = "French Fries",
                            ProductCategoryId = 2,
                            Quantity = 16
                        },
                        new
                        {
                            Id = 18,
                            Cost = 14.0,
                            Name = "Mentaiko Fries",
                            ProductCategoryId = 2,
                            Quantity = 16
                        },
                        new
                        {
                            Id = 19,
                            Cost = 12.0,
                            Name = "Calamari",
                            ProductCategoryId = 2,
                            Quantity = 16
                        });
                });

            modelBuilder.Entity("AnyReservationTemp.Domain.ProductCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Contact")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ProductCategory");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Category = "Appetizer"
                        },
                        new
                        {
                            Id = 2,
                            Category = "Main"
                        },
                        new
                        {
                            Id = 3,
                            Category = "Sides"
                        },
                        new
                        {
                            Id = 4,
                            Category = "Dessert"
                        },
                        new
                        {
                            Id = 5,
                            Category = "Drinks"
                        });
                });

            modelBuilder.Entity("AnyReservationTemp.Domain.Progress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Contact")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Progress");
                });

            modelBuilder.Entity("AnyReservationTemp.Domain.Reservation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Contact")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateReserved")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeOnly>("EndTime")
                        .HasColumnType("time");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumOfCustomer")
                        .HasColumnType("int");

                    b.Property<int>("ProgressId")
                        .HasColumnType("int");

                    b.Property<int>("RestaurantId")
                        .HasColumnType("int");

                    b.Property<TimeOnly>("StartTime")
                        .HasColumnType("time");

                    b.Property<int>("TableNo")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Reservation");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Contact = "9661 0401",
                            CustomerId = 0,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateReserved = new DateTime(2025, 2, 9, 16, 5, 46, 971, DateTimeKind.Local).AddTicks(6419),
                            DateUpdated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmailAddress = "vovinhho@gmail.com",
                            EndTime = new TimeOnly(16, 5, 46, 971).Add(TimeSpan.FromTicks(6441)),
                            Name = "Ho Vo Vinh",
                            NumOfCustomer = 1,
                            ProgressId = 0,
                            RestaurantId = 0,
                            StartTime = new TimeOnly(16, 5, 46, 971).Add(TimeSpan.FromTicks(6435)),
                            TableNo = 0
                        });
                });

            modelBuilder.Entity("AnyReservationTemp.Domain.ReservedTableDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Contact")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ReservationId")
                        .HasColumnType("int");

                    b.Property<int>("RestaurantTableId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ReservedTableDetail");
                });

            modelBuilder.Entity("AnyReservationTemp.Domain.Restaurant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Contact")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ServiceStatus")
                        .HasColumnType("bit");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Restaurant");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Contact = "+65 6780 4191",
                            EmailAddress = "studentservices@tp.edu.sg",
                            ImagePath = "/UI photos/breadboard.png",
                            Location = "21 Tampines Ave 4",
                            Name = "BreadBoard",
                            ServiceStatus = false
                        },
                        new
                        {
                            Id = 2,
                            Contact = "+65 6780 4191",
                            EmailAddress = "studentservices@tp.edu.sg",
                            ImagePath = "/UI photos/restaurant_logo.png",
                            Location = "21 Tampines Ave 4",
                            Name = "Brewing Grounds",
                            ServiceStatus = false
                        },
                        new
                        {
                            Id = 3,
                            Contact = "+65 6780 4191",
                            EmailAddress = "studentservices@tp.edu.sg",
                            ImagePath = "/UI photos/Wolfgang_Puck_logo.jpg",
                            Location = "21 Tampines Ave 4",
                            Name = "Wolfgang Puck",
                            ServiceStatus = false
                        },
                        new
                        {
                            Id = 4,
                            Contact = "+65 6780 4191",
                            EmailAddress = "studentservices@tp.edu.sg",
                            ImagePath = "/UI photos/Short_Circuit_Logo.jpg",
                            Location = "21 Tampines Ave 4",
                            Name = "ShortCircuit",
                            ServiceStatus = false
                        },
                        new
                        {
                            Id = 5,
                            Contact = "+65 6780 4191",
                            EmailAddress = "studentservices@tp.edu.sg",
                            ImagePath = "/UI photos/bisto_bar_logo.jpg",
                            Location = "21 Tampines Ave 4",
                            Name = "The Bistro Bar",
                            ServiceStatus = false
                        });
                });

            modelBuilder.Entity("AnyReservationTemp.Domain.RestaurantProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Contact")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("RestaurantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("RestaurantProductCategory");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ProductId = 3,
                            RestaurantId = 1
                        },
                        new
                        {
                            Id = 2,
                            ProductId = 20,
                            RestaurantId = 6
                        },
                        new
                        {
                            Id = 4,
                            ProductId = 19,
                            RestaurantId = 5
                        },
                        new
                        {
                            Id = 5,
                            ProductId = 18,
                            RestaurantId = 2
                        },
                        new
                        {
                            Id = 6,
                            ProductId = 17,
                            RestaurantId = 5
                        },
                        new
                        {
                            Id = 7,
                            ProductId = 16,
                            RestaurantId = 3
                        },
                        new
                        {
                            Id = 8,
                            ProductId = 15,
                            RestaurantId = 3
                        },
                        new
                        {
                            Id = 10,
                            ProductId = 14,
                            RestaurantId = 3
                        },
                        new
                        {
                            Id = 11,
                            ProductId = 13,
                            RestaurantId = 4
                        },
                        new
                        {
                            Id = 12,
                            ProductId = 12,
                            RestaurantId = 4
                        },
                        new
                        {
                            Id = 13,
                            ProductId = 11,
                            RestaurantId = 2
                        },
                        new
                        {
                            Id = 14,
                            ProductId = 10,
                            RestaurantId = 2
                        },
                        new
                        {
                            Id = 15,
                            ProductId = 9,
                            RestaurantId = 5
                        },
                        new
                        {
                            Id = 16,
                            ProductId = 8,
                            RestaurantId = 5
                        },
                        new
                        {
                            Id = 17,
                            ProductId = 7,
                            RestaurantId = 1
                        },
                        new
                        {
                            Id = 18,
                            ProductId = 6,
                            RestaurantId = 1
                        },
                        new
                        {
                            Id = 19,
                            ProductId = 5,
                            RestaurantId = 5
                        },
                        new
                        {
                            Id = 20,
                            ProductId = 4,
                            RestaurantId = 5
                        },
                        new
                        {
                            Id = 21,
                            ProductId = 2,
                            RestaurantId = 3
                        },
                        new
                        {
                            Id = 22,
                            ProductId = 1,
                            RestaurantId = 1
                        });
                });

            modelBuilder.Entity("AnyReservationTemp.Domain.RestaurantTable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Contact")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumOfSeats")
                        .HasColumnType("int");

                    b.Property<int>("ReservedTableDetailsId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RestaurantTable");
                });

            modelBuilder.Entity("AnyReservationTemp.Domain.RestaurantType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Contact")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RestaurantId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RestaurantType");
                });

            modelBuilder.Entity("AnyReservationTemp.Domain.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Contact")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<int>("ReservationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Review");
                });

            modelBuilder.Entity("AnyReservationTemp.Domain.Staff", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Contact")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NRIC")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RestaurantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Staff");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Contact = "9546 2365",
                            EmailAddress = "workJames@gmail.com",
                            NRIC = "T0047564I",
                            Name = "James Roger",
                            RestaurantId = 0
                        });
                });

            modelBuilder.Entity("AnyReservationTemp.Domain.Status", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Contact")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Status");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Approved"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Pending"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Rejected"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "ad2bcf0c-20db-474f-8407-5a6b159518ba",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = "bd2bcf0c-20db-474f-8407-5a6b159518bb",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = "c23fbbe3-4c80-4e70-9874-985d9030ef94",
                            Name = "RestaurantStaff",
                            NormalizedName = "RESTAURANTSTAFF"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 4,
                            ClaimType = "staffId",
                            ClaimValue = "07f8ba5b-c88f-47fb-8405-43d39e3dc0fa",
                            UserId = "07f8ba5b-c88f-47fb-8405-43d39e3dc0fa"
                        },
                        new
                        {
                            Id = 5,
                            ClaimType = "staffId",
                            ClaimValue = "41b73075-dea9-4fba-9a4f-0331abd78f72",
                            UserId = "41b73075-dea9-4fba-9a4f-0331abd78f72"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "3781efa7-66dc-47f0-860f-e506d04102e4",
                            RoleId = "ad2bcf0c-20db-474f-8407-5a6b159518ba"
                        },
                        new
                        {
                            UserId = "07f8ba5b-c88f-47fb-8405-43d39e3dc0fa",
                            RoleId = "c23fbbe3-4c80-4e70-9874-985d9030ef94"
                        },
                        new
                        {
                            UserId = "41b73075-dea9-4fba-9a4f-0331abd78f72",
                            RoleId = "c23fbbe3-4c80-4e70-9874-985d9030ef94"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("AnyReservationTemp.Data.AnyReservationTempUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("AnyReservationTemp.Data.AnyReservationTempUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AnyReservationTemp.Data.AnyReservationTempUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("AnyReservationTemp.Data.AnyReservationTempUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
